import socketserver
import logging
from http.server import BaseHTTPRequestHandler

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# Server settings
HOST = "0.0.0.0"
PORT = 80


class CmdHttpHandler(BaseHTTPRequestHandler):
    def _set_response(self):
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()

    def do_GET(self):
        # Get client address
        client_ip, client_port = self.client_address
        logger.info("Client connected from %s:%s", client_ip, client_port)

        # Log browser details
        user_agent = self.headers.get("User-Agent")
        logger.info("Browser details:")
        logger.info("User-Agent: %s", user_agent)

        # Send the response
        self._set_response()
        self.wfile.write(self._generate_html().encode("utf-8"))

    def _generate_html(self):
        # Generate the dynamic HTML content
        html_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>PyServe</title>
        </head>
        <body>
            <h1>Welcome to PyServe!</h1>
            <p>This page was dynamically generated by the server that is to 100% powered by Python.</p>
            <p>Your IP address: {ip}</p>
            <p>User-Agent: {user_agent}</p>
        </body>
        </html>
        """.format(ip=self.client_address[0], user_agent=self.headers.get("User-Agent"))

        return html_content


def main():
    logger.info("Welcome to PyServer - The Python HTTP Server!")
    logger.info("Server Details:")
    logger.info("IP: %s", HOST)
    logger.info("Port: %s", PORT)
    logger.info("To terminate the connection, please enter 'EXIT'.")
    logger.info(
        "Please be aware that certain commands may result in temporary system delays. If this occurs, please retry the command."
    )
    logger.info("")

    try:
        # Create and start the server
        with socketserver.TCPServer((HOST, PORT), CmdHttpHandler) as server:
            server.serve_forever()
    except KeyboardInterrupt:
        logger.info("Shutting down the server.")
    except Exception as e:
        logger.error(f"An error occurred: {e}")


if __name__ == "__main__":
    main()
